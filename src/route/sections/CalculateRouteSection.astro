---
---

<section class="pt-25 md:pt-20 ml-0 px-0 sm:px-4 md:ml-12 md:px-8 2xl:ml-24">
  <div class="max-w-6xl mx-auto">
    <h2 class="text-4xl font-bold mb-8 text-theme-verdigris">Calcular Ruta</h2>

    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Formulario -->
      <div class="lg:w-1/2">
        <form id="rutaForm" class="p-6 bg-white rounded-xl shadow-md sticky top-4">
          <!-- Capacidad por vehículo -->
          <div class="mb-6">
            <label for="capacidad" class="block text-sm font-medium text-gray-700 mb-1">
              Capacidad por vehículo (kg)
              <span class="text-red-500">*</span>
            </label>
            <input 
              type="number" 
              id="capacidad" 
              name="capacidad" 
              value="30" 
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
            >
          </div>

          <!-- Número de vehículos -->
          <div class="mb-6">
            <label for="vehiculos" class="block text-sm font-medium text-gray-700 mb-1">
              Número de vehículos
              <span class="text-red-500">*</span>
            </label>
            <input 
              type="number" 
              id="vehiculos" 
              name="vehiculos" 
              value="2" 
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
            >
          </div>

          <!-- Velocidad promedio -->
          <div class="mb-6">
            <label for="velocidad" class="block text-sm font-medium text-gray-700 mb-1">
              Velocidad promedio (km/h)
              <span class="text-red-500">*</span>
            </label>
            <input 
              type="number" 
              step="0.1" 
              id="velocidad" 
              name="velocidad" 
              value="10" 
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
            >
          </div>

          <!-- Tiempo máximo de ruta -->
          <div class="mb-6">
            <label for="tiempo" class="block text-sm font-medium text-gray-700 mb-1">
              Tiempo máximo de ruta (horas)
              <span class="text-red-500">*</span>
            </label>
            <input 
              type="number" 
              step="0.1" 
              id="tiempo" 
              name="tiempo" 
              value="2.5" 
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
            >
          </div>

          <!-- Botón de envío -->
          <button 
            type="submit" 
            class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-md transition duration-200 transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Calcular Ruta
          </button>
        </form>
      </div>

      <!-- Mapa y Resultados -->
      <div class="lg:w-1/2 relative">
        <!-- Mapa -->
        <div id="map" class="w-full h-[500px] rounded-lg border border-gray-300 shadow-sm relative"></div>
        
        <!-- Resultado como ventana flotante -->
        <div id="resultado" class="absolute bottom-6 left-6 right-6 bg-white/90 backdrop-blur-sm p-4 rounded-lg shadow-lg border border-gray-200 z-10 transition-all duration-300 opacity-0 invisible max-h-[40%] overflow-y-auto">
          <div class="flex justify-between items-center mb-2">
            <h3 class="font-bold text-lg text-gray-800">Resultados de la Ruta</h3>
            <button id="cerrarResultado" class="text-gray-500 hover:text-gray-700">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
          <div class="text-gray-700 space-y-2" id="resultadoContenido"></div>
        </div>
      </div>
    </div>
  </div>
</section>

  <style>
    #map {
      min-height: 400px;
      min-width: 100%;
      position: relative;
      z-index: 0;
    }
  </style>

  <script src="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js"></script>

<script is:inline>
    const form = document.querySelector('#rutaForm');
    const resultado = document.querySelector('#resultado');

    const puntos = [
      { id: 0, nombre: 'Depósito', x: -9.0851, y: -78.5936, demanda: 0 },
      { id: 1, nombre: 'Destino A', x: -9.0743, y: -78.5980, demanda: 20 },
      { id: 2, nombre: 'Destino B', x: -9.0722, y: -78.5905, demanda: 15 },
      { id: 3, nombre: 'Destino C', x: -9.0814, y: -78.5852, demanda: 10 }
    ];

    const matriz = [
      [0, 1.4, 2.0, 2.0],
      [1.4, 0, 1.4, 2.2],
      [2.0, 1.4, 0, 2.8],
      [2.0, 2.2, 2.8, 0]
    ];

    let map;
    let routeLayerIdCounter = 0;
    const layerIds = [];
    const arrowIconUrl = 'https://cdn-icons-png.flaticon.com/512/271/271228.png';
    let rutasGlobales = [];
    let puntosGlobales = puntos;

    function cargarFlecha() {
      if (map.hasImage('arrow')) return;
      map.loadImage(arrowIconUrl, (error, image) => {
        if (error) {
          console.error('Error al cargar flecha:', error);
          return;
        }
        map.addImage('arrow', image);
      });
    }

    function limpiarRutasPrevias() {
      // Eliminar primero las capas que usan las fuentes
      const layersToRemove = layerIds.filter(id => map.getLayer(id));
      const sourcesToRemove = layerIds.filter(id => map.getSource(id) && !map.getLayer(id));
      
      layersToRemove.forEach(id => {
        try {
          if (map.getLayer(id)) map.removeLayer(id);
        } catch (error) {
          console.warn(`Error al eliminar capa ${id}:`, error);
        }
      });
      
      sourcesToRemove.forEach(id => {
        try {
          if (map.getSource(id)) map.removeSource(id);
        } catch (error) {
          console.warn(`Error al eliminar fuente ${id}:`, error);
        }
      });
      
      layerIds.length = 0;
    }

    function mostrarRutaIndividual(index) {
      // Verificar si ya existe la fuente y eliminarla primero
      const sourceId = `ruta-activa-${index}`;
      if (map.getSource(sourceId)) {
        map.removeSource(sourceId);
      }
      
      limpiarRutasPrevias();
      
      const ruta = rutasGlobales[index];
      console.log('Mostrando ruta:', index, ruta);
      
      const coords = [
        [puntosGlobales[0].y, puntosGlobales[0].x],
        ...ruta.map(id => [puntosGlobales[id].y, puntosGlobales[id].x]),
        [puntosGlobales[0].y, puntosGlobales[0].x]
      ];

      // Dibujar la ruta seleccionada
      const layerId = `ruta-activa-${index}`;
      try {
        map.addSource(layerId, {
          type: 'geojson',
          data: {
            type: 'Feature',
            geometry: {
              type: 'LineString',
              coordinates: coords
            }
          }
        });
        layerIds.push(layerId);

        map.addLayer({
          id: layerId,
          type: 'line',
          source: layerId,
          layout: {
            'line-join': 'round',
            'line-cap': 'round'
          },
          paint: {
            'line-color': '#3b82f6',
            'line-width': 6,
            'line-opacity': 1
          }
        });
        layerIds.push(layerId);

        // Añadir flecha
        map.addLayer({
          id: `${layerId}-arrow`,
          type: 'symbol',
          source: layerId,
          layout: {
            'symbol-placement': 'line',
            'symbol-spacing': 50,
            'icon-image': 'arrow',
            'icon-size': 0.08,
            'icon-allow-overlap': true
          }
        });
        layerIds.push(`${layerId}-arrow`);

        // Resaltar puntos de esta ruta
        ruta.forEach(id => {
          const markerLayerId = `marker-${id}-${index}`;
          if (map.getSource(markerLayerId)) {
            map.removeSource(markerLayerId);
          }
          
          map.addSource(markerLayerId, {
            type: 'geojson',
            data: {
              type: 'Feature',
              geometry: {
                type: 'Point',
                coordinates: [puntosGlobales[id].y, puntosGlobales[id].x]
              }
            }
          });
          layerIds.push(markerLayerId);
          
          map.addLayer({
            id: markerLayerId,
            type: 'circle',
            source: markerLayerId,
            paint: {
              'circle-radius': 10,
              'circle-color': '#3b82f6',
              'circle-stroke-width': 2,
              'circle-stroke-color': '#ffffff'
            }
          });
          layerIds.push(markerLayerId);
        });

        // Ajustar vista
        const bounds = coords.reduce((bounds, coord) => {
          return bounds.extend(coord);
        }, new maplibregl.LngLatBounds(coords[0], coords[0]));

        map.fitBounds(bounds, { padding: 100 });
        
        // Resaltar el ítem clickeado
        document.querySelectorAll('.ruta-item').forEach(item => {
          item.classList.remove('bg-blue-50', 'border-blue-700');
          item.querySelector('.ruta-numero').classList.remove('text-white', 'bg-blue-600');
        });
        
        const clickedItem = document.querySelector(`.ruta-item[data-ruta-index="${index}"]`);
        if (clickedItem) {
          clickedItem.classList.add('bg-blue-50', 'border-blue-700');
          clickedItem.querySelector('.ruta-numero').classList.add('text-white', 'bg-blue-600');
        }

      } catch (error) {
        console.error('Error al mostrar ruta:', error);
      }
    }

    window.addEventListener('load', () => {
      map = new maplibregl.Map({
        container: 'map',
        style: 'https://demotiles.maplibre.org/style.json',
        center: [-78.5936, -9.0851],
        zoom: 13
      });

      map.addControl(new maplibregl.NavigationControl());

      puntos.forEach(p => {
        const marker = new maplibregl.Marker({
          color: p.id === 0 ? '#2ecc71' : '#e74c3c'
        })
          .setLngLat([p.y, p.x])
          .setPopup(new maplibregl.Popup().setText(p.nombre))
          .addTo(map);
      });

      cargarFlecha();
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      limpiarRutasPrevias();

      const data = new FormData(form);
      const capacidad = parseInt(data.get('capacidad'));
      const vehiculos = parseInt(data.get('vehiculos'));
      const velocidad = parseFloat(data.get('velocidad'));
      const tiempo = parseFloat(data.get('tiempo'));
      const deposito = 0;

      const puntosParaEnvio = puntos.map(p => ({
        id: p.id,
        x: p.x,
        y: p.y,
        demanda: p.demanda || 0
      }));

      const body = {
        puntos: puntosParaEnvio,
        deposito_id: deposito,
        capacidad_vehiculo: capacidad,
        numero_vehiculos: vehiculos,
        tiempo_maximo: tiempo,
        velocidad_promedio: velocidad,
        matriz_distancias: matriz
      };

      // Debug: Mostrar lo que se envía a la API
      console.log('Enviando a la API:', JSON.stringify(body, null, 2));

      const resultadoContenido = document.getElementById('resultadoContenido');
      resultadoContenido.innerHTML = '<div class="flex justify-center py-4"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div></div>';
      
      const resultado = document.getElementById('resultado');
      resultado.classList.remove('opacity-0', 'invisible');
      resultado.classList.add('opacity-100', 'visible');

      try {
        const res = await fetch('https://peco-backend-795306361872.southamerica-east1.run.app/resolver', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });

        if (!res.ok) {
          const error = await res.json();
          console.error('Error en la respuesta:', error);
          resultadoContenido.innerHTML = `<div class="text-red-600 font-bold p-2 bg-red-50 rounded">Error ${res.status}: ${error.detail}</div>`;
          return;
        }

        const json = await res.json();
        rutasGlobales = json.rutas;

        // Debug: Mostrar lo que recibimos de la API
        console.log('Respuesta de la API:', JSON.stringify(json, null, 2));

        resultadoContenido.innerHTML = `
          <div class="space-y-3">
            <div class="flex justify-between items-start">
              <h4 class="font-semibold text-gray-900">Resultados del enrutamiento</h4>
              <span class="text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded">${new Date().toLocaleTimeString()}</span>
            </div>
            
            <div class="grid grid-cols-1 gap-2" id="lista-rutas">
              ${json.rutas.map((ruta, i) => `
                <div 
                  class="border-l-4 border-blue-500 pl-3 cursor-pointer hover:bg-gray-50 transition-colors ruta-item" 
                  data-ruta-index="${i}"
                  onclick="mostrarRutaIndividual(${i})"
                >
                  <div class="flex items-center justify-between">
                    <span class="font-medium">
                      <span class="ruta-numero inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-100 text-blue-800 text-sm mr-2">
                        ${i + 1}
                      </span>
                      Camión ${i + 1}
                    </span>
                    <span class="text-sm text-gray-600">${ruta.length} paradas</span>
                  </div>
                  <div class="text-sm text-gray-700 mt-1 truncate">
                    0 → ${ruta.join(' → ')} → 0
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="pt-2 mt-2 border-t border-gray-200 space-y-1">
              <div class="flex justify-between">
                <span>Distancia total:</span>
                <span class="font-medium">${json.distancia_total.toFixed(2)} km</span>
              </div>
              <div class="flex justify-between">
                <span>Tiempo máximo:</span>
                <span class="font-medium">${json.tiempo_maximo_camion.toFixed(2)} h</span>
              </div>
            </div>
          </div>
        `;

        // Mostrar automáticamente la primera ruta
        if (json.rutas.length > 0) {
          mostrarRutaIndividual(0);
        }

      } catch (error) {
        console.error('Error en la solicitud:', error);
        resultadoContenido.innerHTML = `
          <div class="p-3 bg-red-50 border-l-4 border-red-500 text-red-700">
            <p class="font-bold">Error inesperado:</p>
            <p class="text-sm mt-1">${error.message}</p>
          </div>
        `;
      }
    });
</script>

</section>
